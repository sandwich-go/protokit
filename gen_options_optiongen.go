// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package protokit

import (
	"sync/atomic"
	"unsafe"
)

// Options should use NewOptions to initialize it
type Options struct {
	// annotation@GolangBasePackagePath(comment="golang基础package path")
	GolangBasePackagePath string `xconf:"golang_base_package_path" usage:"golang基础package path"`
	// annotation@GolangRelative(comment="是否启用golang relative模式")
	GolangRelative bool `xconf:"golang_relative" usage:"是否启用golang relative模式"`
	// annotation@ProtoImportPath(comment="proto import路径")
	ProtoImportPath []string `xconf:"proto_import_path" usage:"proto import路径"`
	// annotation@ProtoFileAccessor(comment="proto import路径")
	ProtoFileAccessor FileAccessor `xconf:"proto_file_accessor" usage:"proto import路径"`
	// annotation@ProtoFileExcludeFilter(comment="proto过滤")
	ProtoFileExcludeFilter FileExcludeFilter `xconf:"proto_file_exclude_filter" usage:"proto过滤"`
	// annotation@ZapLogMapKeyTypes(comment="以类型为key的map的MarshalLogObject实现，使得可以直接使用zap.Object函数打印map数据")
	ZapLogMapKeyTypes []string `xconf:"zap_log_map_key_types" usage:"以类型为key的map的MarshalLogObject实现，使得可以直接使用zap.Object函数打印map数据"`
	// annotation@ZapLogBytesMode(comment="zap以何种方式输出[]byte, 可以使用base64或者bytes, 默认bytes")
	ZapLogBytesMode string `xconf:"zap_log_bytes_mode" usage:"zap以何种方式输出[]byte, 可以使用base64或者bytes, 默认bytes"`
	// annotation@NamePattern(comment="名称格式化空自己",inline="true")
	*NamePattern `xconf:"name_pattern" usage:"名称格式化空自己"`
	// annotation@ImportSetExclude(comment="import set忽略指定name的package")
	ImportSetExclude []string `xconf:"import_set_exclude" usage:"import set忽略指定name的package"`
	// annotation@URIUsingGRPC(comment="service的uri是否使用GRPC模式")
	URIUsingGRPC bool `xconf:"uri_using_grpc" usage:"service的uri是否使用GRPC模式"`
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithGolangBasePackagePath golang基础package path
func WithGolangBasePackagePath(v string) Option {
	return func(cc *Options) Option {
		previous := cc.GolangBasePackagePath
		cc.GolangBasePackagePath = v
		return WithGolangBasePackagePath(previous)
	}
}

// WithGolangRelative 是否启用golang relative模式
func WithGolangRelative(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.GolangRelative
		cc.GolangRelative = v
		return WithGolangRelative(previous)
	}
}

// WithProtoImportPath proto import路径
func WithProtoImportPath(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.ProtoImportPath
		cc.ProtoImportPath = v
		return WithProtoImportPath(previous...)
	}
}

// WithProtoFileAccessor proto import路径
func WithProtoFileAccessor(v FileAccessor) Option {
	return func(cc *Options) Option {
		previous := cc.ProtoFileAccessor
		cc.ProtoFileAccessor = v
		return WithProtoFileAccessor(previous)
	}
}

// WithProtoFileExcludeFilter proto过滤
func WithProtoFileExcludeFilter(v FileExcludeFilter) Option {
	return func(cc *Options) Option {
		previous := cc.ProtoFileExcludeFilter
		cc.ProtoFileExcludeFilter = v
		return WithProtoFileExcludeFilter(previous)
	}
}

// WithZapLogMapKeyTypes 以类型为key的map的MarshalLogObject实现，使得可以直接使用zap.Object函数打印map数据
func WithZapLogMapKeyTypes(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.ZapLogMapKeyTypes
		cc.ZapLogMapKeyTypes = v
		return WithZapLogMapKeyTypes(previous...)
	}
}

// WithZapLogBytesMode zap以何种方式输出[]byte, 可以使用base64或者bytes, 默认bytes
func WithZapLogBytesMode(v string) Option {
	return func(cc *Options) Option {
		previous := cc.ZapLogBytesMode
		cc.ZapLogBytesMode = v
		return WithZapLogBytesMode(previous)
	}
}

// WithNamePattern 名称格式化空自己
func WithNamePattern(v *NamePattern) Option {
	return func(cc *Options) Option {
		previous := cc.NamePattern
		cc.NamePattern = v
		return WithNamePattern(previous)
	}
}

// WithImportSetExclude import set忽略指定name的package
func WithImportSetExclude(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.ImportSetExclude
		cc.ImportSetExclude = v
		return WithImportSetExclude(previous...)
	}
}

// WithURIUsingGRPC service的uri是否使用GRPC模式
func WithURIUsingGRPC(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.URIUsingGRPC
		cc.URIUsingGRPC = v
		return WithURIUsingGRPC(previous)
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithGolangBasePackagePath(""),
		WithGolangRelative(true),
		WithProtoImportPath(make([]string, 0)...),
		WithProtoFileAccessor(nil),
		WithProtoFileExcludeFilter(defaultFileExcludeFilter),
		WithZapLogMapKeyTypes([]string{"int", "int32", "int64", "uint32", "uint64", "string"}...),
		WithZapLogBytesMode("bytes"),
		WithNamePattern(NewNamePattern()),
		WithImportSetExclude([]string{"netutils"}...),
		WithURIUsingGRPC(false),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Options) AtomicSetFunc() func(interface{}) { return AtomicOptionsSet }

// atomicOptions global *Options holder
var atomicOptions unsafe.Pointer

// onAtomicOptionsSet global call back when  AtomicOptionsSet called by XConf.
// use OptionsInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicOptions
var onAtomicOptionsSet func(cc OptionsInterface) bool

// InstallCallbackOnAtomicOptionsSet install callback
func InstallCallbackOnAtomicOptionsSet(callback func(cc OptionsInterface) bool) {
	onAtomicOptionsSet = callback
}

// AtomicOptionsSet atomic setter for *Options
func AtomicOptionsSet(update interface{}) {
	cc := update.(*Options)
	if onAtomicOptionsSet != nil && !onAtomicOptionsSet(cc) {
		return
	}
	atomic.StorePointer(&atomicOptions, (unsafe.Pointer)(cc))
}

// AtomicOptions return atomic *OptionsVisitor
func AtomicOptions() OptionsVisitor {
	current := (*Options)(atomic.LoadPointer(&atomicOptions))
	if current == nil {
		defaultOne := newDefaultOptions()
		if watchDogOptions != nil {
			watchDogOptions(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicOptions, nil, (unsafe.Pointer)(defaultOne))
		return (*Options)(atomic.LoadPointer(&atomicOptions))
	}
	return current
}

// all getter func
func (cc *Options) GetGolangBasePackagePath() string             { return cc.GolangBasePackagePath }
func (cc *Options) GetGolangRelative() bool                      { return cc.GolangRelative }
func (cc *Options) GetProtoImportPath() []string                 { return cc.ProtoImportPath }
func (cc *Options) GetProtoFileAccessor() FileAccessor           { return cc.ProtoFileAccessor }
func (cc *Options) GetProtoFileExcludeFilter() FileExcludeFilter { return cc.ProtoFileExcludeFilter }
func (cc *Options) GetZapLogMapKeyTypes() []string               { return cc.ZapLogMapKeyTypes }
func (cc *Options) GetZapLogBytesMode() string                   { return cc.ZapLogBytesMode }
func (cc *Options) GetNamePattern() *NamePattern                 { return cc.NamePattern }
func (cc *Options) GetImportSetExclude() []string                { return cc.ImportSetExclude }
func (cc *Options) GetURIUsingGRPC() bool                        { return cc.URIUsingGRPC }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetGolangBasePackagePath() string
	GetGolangRelative() bool
	GetProtoImportPath() []string
	GetProtoFileAccessor() FileAccessor
	GetProtoFileExcludeFilter() FileExcludeFilter
	GetZapLogMapKeyTypes() []string
	GetZapLogBytesMode() string
	GetNamePattern() *NamePattern
	GetImportSetExclude() []string
	GetURIUsingGRPC() bool
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
