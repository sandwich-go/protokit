// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package protokit

import (
	"sync/atomic"
	"unsafe"
)

// NamePattern should use NewNamePattern to initialize it
type NamePattern struct {
	// annotation@NamePatternServerHandler(comment="code server handler名称格式化")
	NamePatternServerHandler string `xconf:"name_pattern_server_handler" usage:"code server handler名称格式化"`
	// annotation@NamePatternRPCClient(comment="code rpc client名称格式化")
	NamePatternRPCClient string `xconf:"name_pattern_rpc_client" usage:"code rpc client名称格式化"`
	// annotation@NamePatternActorClient(comment="code actor client名称格式化")
	NamePatternActorClient string `xconf:"name_pattern_actor_client" usage:"code actor client名称格式化"`
	// annotation@NamePatternERPCClient(comment="code erpc client名称格式化")
	NamePatternERPCClient string `xconf:"name_pattern_erpc_client" usage:"code erpc client名称格式化"`
	// annotation@NamePatternHTTPPath(comment="自动生成的HTTP PATHG格式")
	NamePatternHTTPPath string `xconf:"name_pattern_http_path" usage:"自动生成的HTTP PATHG格式"`
	// annotation@NamePatternJobClient(comment="job client 的名称格式化")
	NamePatternJobClient string `xconf:"name_pattern_job_client" usage:"job client 的名称格式化"`
	// annotation@NamePatternJobService(comment="job service 的名称格式化")
	NamePatternJobService string `xconf:"name_pattern_job_service" usage:"job service 的名称格式化"`
	// annotation@NamePatternJobMethod(comment="job method 的名称格式化")
	NamePatternJobMethod string `xconf:"name_pattern_job_method" usage:"job method 的名称格式化"`
}

// NewNamePattern new NamePattern
func NewNamePattern(opts ...NamePatternOption) *NamePattern {
	cc := newDefaultNamePattern()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogNamePattern != nil {
		watchDogNamePattern(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *NamePattern) ApplyOption(opts ...NamePatternOption) []NamePatternOption {
	var previous []NamePatternOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// NamePatternOption option func
type NamePatternOption func(cc *NamePattern) NamePatternOption

// WithNamePatternServerHandler code server handler名称格式化
func WithNamePatternServerHandler(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternServerHandler
		cc.NamePatternServerHandler = v
		return WithNamePatternServerHandler(previous)
	}
}

// WithNamePatternRPCClient code rpc client名称格式化
func WithNamePatternRPCClient(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternRPCClient
		cc.NamePatternRPCClient = v
		return WithNamePatternRPCClient(previous)
	}
}

// WithNamePatternActorClient code actor client名称格式化
func WithNamePatternActorClient(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternActorClient
		cc.NamePatternActorClient = v
		return WithNamePatternActorClient(previous)
	}
}

// WithNamePatternERPCClient code erpc client名称格式化
func WithNamePatternERPCClient(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternERPCClient
		cc.NamePatternERPCClient = v
		return WithNamePatternERPCClient(previous)
	}
}

// WithNamePatternHTTPPath 自动生成的HTTP PATHG格式
func WithNamePatternHTTPPath(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternHTTPPath
		cc.NamePatternHTTPPath = v
		return WithNamePatternHTTPPath(previous)
	}
}

// WithNamePatternJobClient job client 的名称格式化
func WithNamePatternJobClient(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternJobClient
		cc.NamePatternJobClient = v
		return WithNamePatternJobClient(previous)
	}
}

// WithNamePatternJobService job service 的名称格式化
func WithNamePatternJobService(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternJobService
		cc.NamePatternJobService = v
		return WithNamePatternJobService(previous)
	}
}

// WithNamePatternJobMethod job method 的名称格式化
func WithNamePatternJobMethod(v string) NamePatternOption {
	return func(cc *NamePattern) NamePatternOption {
		previous := cc.NamePatternJobMethod
		cc.NamePatternJobMethod = v
		return WithNamePatternJobMethod(previous)
	}
}

// InstallNamePatternWatchDog the installed func will called when NewNamePattern  called
func InstallNamePatternWatchDog(dog func(cc *NamePattern)) { watchDogNamePattern = dog }

// watchDogNamePattern global watch dog
var watchDogNamePattern func(cc *NamePattern)

// newDefaultNamePattern new default NamePattern
func newDefaultNamePattern() *NamePattern {
	cc := &NamePattern{}

	for _, opt := range [...]NamePatternOption{
		WithNamePatternServerHandler("ServerHandler%s"),
		WithNamePatternRPCClient("RPCClient%s"),
		WithNamePatternActorClient("ActorClient%s"),
		WithNamePatternERPCClient("ERPCClient%s"),
		WithNamePatternHTTPPath("%s"),
		WithNamePatternJobClient("JobClient%s"),
		WithNamePatternJobService("JobService%s"),
		WithNamePatternJobMethod("%sForJob"),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *NamePattern) AtomicSetFunc() func(interface{}) { return AtomicNamePatternSet }

// atomicNamePattern global *NamePattern holder
var atomicNamePattern unsafe.Pointer

// onAtomicNamePatternSet global call back when  AtomicNamePatternSet called by XConf.
// use NamePatternInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicNamePattern
var onAtomicNamePatternSet func(cc NamePatternInterface) bool

// InstallCallbackOnAtomicNamePatternSet install callback
func InstallCallbackOnAtomicNamePatternSet(callback func(cc NamePatternInterface) bool) {
	onAtomicNamePatternSet = callback
}

// AtomicNamePatternSet atomic setter for *NamePattern
func AtomicNamePatternSet(update interface{}) {
	cc := update.(*NamePattern)
	if onAtomicNamePatternSet != nil && !onAtomicNamePatternSet(cc) {
		return
	}
	atomic.StorePointer(&atomicNamePattern, (unsafe.Pointer)(cc))
}

// AtomicNamePattern return atomic *NamePatternVisitor
func AtomicNamePattern() NamePatternVisitor {
	current := (*NamePattern)(atomic.LoadPointer(&atomicNamePattern))
	if current == nil {
		defaultOne := newDefaultNamePattern()
		if watchDogNamePattern != nil {
			watchDogNamePattern(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicNamePattern, nil, (unsafe.Pointer)(defaultOne))
		return (*NamePattern)(atomic.LoadPointer(&atomicNamePattern))
	}
	return current
}

// all getter func
func (cc *NamePattern) GetNamePatternServerHandler() string { return cc.NamePatternServerHandler }
func (cc *NamePattern) GetNamePatternRPCClient() string     { return cc.NamePatternRPCClient }
func (cc *NamePattern) GetNamePatternActorClient() string   { return cc.NamePatternActorClient }
func (cc *NamePattern) GetNamePatternERPCClient() string    { return cc.NamePatternERPCClient }
func (cc *NamePattern) GetNamePatternHTTPPath() string      { return cc.NamePatternHTTPPath }
func (cc *NamePattern) GetNamePatternJobClient() string     { return cc.NamePatternJobClient }
func (cc *NamePattern) GetNamePatternJobService() string    { return cc.NamePatternJobService }
func (cc *NamePattern) GetNamePatternJobMethod() string     { return cc.NamePatternJobMethod }

// NamePatternVisitor visitor interface for NamePattern
type NamePatternVisitor interface {
	GetNamePatternServerHandler() string
	GetNamePatternRPCClient() string
	GetNamePatternActorClient() string
	GetNamePatternERPCClient() string
	GetNamePatternHTTPPath() string
	GetNamePatternJobClient() string
	GetNamePatternJobService() string
	GetNamePatternJobMethod() string
}

// NamePatternInterface visitor + ApplyOption interface for NamePattern
type NamePatternInterface interface {
	NamePatternVisitor
	ApplyOption(...NamePatternOption) []NamePatternOption
}
